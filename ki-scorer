// worker name: ki-scorer
// Route: POST /  ->  returns: { score: 0..100, reason?: string }

export default {
  async fetch(request, env) {
    if (request.method !== "POST") {
      return new Response("Only POST", { status: 405 });
    }

    let body;
    try {
      body = await request.json();
    } catch {
      return new Response(JSON.stringify({ error: "invalid JSON" }), {
        status: 400, headers: { "content-type": "application/json" }
      });
    }

    const {
      symbol = "", price = null, rsi = null, pctChange = null,
      breakout = null, momentum = null
    } = body || {};

    // einfache Heuristik, falls OpenAI ausfällt
    const fallbackScore = (() => {
      let s = 50;
      if (breakout === true) s += 15;
      if (momentum === true) s += 10;
      if (typeof rsi === "number") {
        if (rsi >= 60) s += 10;
        else if (rsi < 35) s -= 10;
      }
      if (typeof pctChange === "number") {
        if (pctChange >= 5) s += 10;
        if (pctChange <= -3) s -= 10;
      }
      return Math.max(0, Math.min(100, Math.round(s)));
    })();

    const prompt = `
Bewerte dieses Setup für ein kurzfristiges Momentum-/Breakout-Trade-Setup. 
Gib NUR eine ganze Zahl 0..100 aus (ohne Text).
Kontext:
- Ticker: ${symbol}
- Preis: ${price}
- RSI(14): ${rsi}
- Tagesänderung %: ${pctChange}
- Breakout über N-Hoch: ${breakout}
- Momentumkriterium erfüllt: ${momentum}

Skala:
0..39 = schwach/ablehnen, 40..69 = neutral/abwarten, 70..100 = stark/kaufen.
Antwort:`;

    try {
      const resp = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
          "User-Agent": "heinrich-gif-ki-scorer"
        },
        body: JSON.stringify({
          model: env.OPENAI_MODEL || "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
          temperature: 0.2,
          max_tokens: 8
        })
      });

      if (!resp.ok) {
        const t = await resp.text();
        return new Response(JSON.stringify({ score: fallbackScore, reason: "openai_error", detail: t }), {
          status: 200, headers: { "content-type": "application/json" }
        });
      }

      const data = await resp.json();
      let raw = (data?.choices?.[0]?.message?.content ?? "").trim();
      // nur Ziffern extrahieren
      const m = raw.match(/(\d{1,3})/);
      let score = m ? parseInt(m[1], 10) : fallbackScore;
      if (isNaN(score)) score = fallbackScore;
      score = Math.max(0, Math.min(100, score));
      return new Response(JSON.stringify({ score }), {
        status: 200, headers: { "content-type": "application/json" }
      });
    } catch (e) {
      return new Response(JSON.stringify({ score: fallbackScore, reason: "exception", detail: String(e) }), {
        status: 200, headers: { "content-type": "application/json" }
      });
    }
  }
};
